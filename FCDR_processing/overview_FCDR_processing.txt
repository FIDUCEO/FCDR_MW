

In FIDUCEO/FCDR_MW/FCDR_processing/ the set of functions and scripts is collected that are needed to process MW l1b data to FIDUCEO l1c FCDR.
In the FCDR_processing folder, also auxiliary files are stored:

Files containing thresholds, antenna pattern correction, polarisation correction alpha, uncertainty of RFI-impact, spectral response function-information:
coeffs_f11ssmt2_alpha.mat
coeffs_f12ssmt2_alpha.mat
coeffs_f14ssmt2_alpha.mat
coeffs_f15ssmt2_alpha.mat
coeffs_noaa15amsub_antcorr_alpha.mat
coeffs_noaa16amsub_antcorr_alpha.mat
coeffs_noaa17amsub_antcorr_alpha.mat
coeffs_noaa18mhs_antcorr_alpha.mat
coeffs_noaa19mhs_antcorr_alpha.mat
coeffs_metopamhs_antcorr_alpha.mat
coeffs_metopbmhs_antcorr_alpha.mat

RFI-correction scheme:
RFI_corr_FromTb_noaa15amsub.mat
RFI_corr_FromTb_noaa16amsub.mat
RFI_corr_FromTb_noaa17amsub.mat
RFI_corr_FromTb_noaa19mhs.mat

The RFI-correction scheme is also stored in netcdf-files (RFI_correction_scheme_NOAA15.nc, etc). These are not used in the processing but only serve as easy-accessible information on the RFI-scheme.


Important:
1. Note that atmlab is required to run the processing. http://www.radiativetransfer.org/tools/

The FCDR_generator function uses atmlab functions for collecting available data. The path to the level 1b data is set in atmlab/site-specific/hamburg/datasets_init.m as D.amsub.basedir = [data_base_dir 'amsub'];
and similar for MHS and SSMT2. 
2. In order to perform the checks for moon-intrusions in mooncheck_processing.m, auxiliary data files are necessary. They are obtained from the AAPP-subroutine amubcl and mhscl, respectively (see DOC_mhscl_documentation.docx). These files are stored in

/scratch/uni/u237/data/fiduceo-fcdr/aux-data/cl_archive_files satellite/year/

They are labelled as e.g.
mhscl_NSS.MHSX.NN.D05365.S2027.E2216.B0317879.GC.log

To rerun the FCDR code, you will have to change the path to the log-files (newly produced by yourself)  in the mooncheck_processing.m script, in case you cannot access the path given above.
Overview of code
Here I present an overview of the used MATLAB scripts (S) and functions (F) for the FCDR production. Note that also some atmlab functions are used that might not be explicitly listed here (like invcm2hz, or time conversions). This list is rather meant as overview of the dependences and interactions of the newly coded FCDR production.

If any constants that are set in the script “set_coeffs” are changed by the user, he has to re-run the script, which will write new coeffs_”satellitesensor”_antcorr_alpha.mat-files:

set_coeffs (S)

Then, all .mat files containing the constants are updated and usable for the processing to l1c.

run_batch_mission(S) (used to run whole missions on thunder7)
	calls:

FCDR_generator (F)
MW_l1b_read_monthly (F) (uses atmlab dataset methods and sensor functions, marked in italic)
	find_granules_for_period (F)
satreaders.poes_radiometer_level1b (F)
read_MW_level1b (F)
read_MHS_allvar(F)
	read_MHS_header(F)
read_MHS_record(F)
read_AMSUB_allvar(F)
read_AMSUB_header(F)
read_AMSUB_record(F)
read_SSMT2_allvar(F)
	ssmt2_read(F)	
	doy2date(F) (by A. Booth)
	mills2hmsmill(F)
remove_duplicated_l1bdata (S)
	RunLength_M(F)
determine_EQcrossings (F)
determine_data_gaps (F)
process_FCDR (S)
	chop_data_EQ2EQ (F)
setup_MHS_processing2l1c (S)/ setup_AMSUB_processing2l1c (S)/ setup_SSMT2_processing2l1c (S)
	fill_missing_scanlines (F)/ fill_missing_scanlines_SSMT2 (F)
doy2date(F) (by A. Booth)
	calculate_solarAndsatellite_azimuth_angle (S)
	RFI_correction_LUT(F)
	calculate_AllanDeviation_DSV_IWCT_withoutQualflags (S)
mooncheck_processing (S)
qualitychecksDSV_allchn (S)
filter_plateausANDpeaks(F)
qualitychecksIWCT_allchn (S)
filter_plateausANDpeaks(F)
qualitychecksPRT_allsensors (S)
filter_plateausANDpeaks(F)
qualitychecksEarthview (S)
filter_plateausANDpeaks_earth(F)
calculate_AllanDeviation_DSV_IWCT_PRT (S)
setup_roll_average (S)
	unify_qualflags(F)
calculate_roll_average (S)
qualitychecksEarthLocation (S)
qualitychecksSpaceViewLocation (S)
qualitychecksIWCTViewLocation (S)
prepare_empty_file (S)
write_easyFCDR_orbitfile_MHS (S)/ write_easyFCDR_orbitfile_AMSUB(S)/ write_easyFCDR_orbitfile_SSMT2 (S)
	change_type (F)
	change_type_zero_nan(F)
	measurement_equation (S)
		planck(F)
invplanck(F)
	uncertainty_propagation_optimized (S)
		DplanckDf(F)
DplanckDT(F)
DinvplanckDrad(F)
quality_flags_fromlevel1b (S)
	fill_missing_scanlines(F)/ fill_missing_scanlines_SSMT2(F)
              quality_flags_setting_easyFCDR (S)
add_RFI_uncertainty (S)
estimate_correlations_cross_channel(S)
write_easyFCDR_orbitfile_MHS (S) /write_easyFCDR_orbitfile_AMSUB (S) / write_easyFCDR_orbitfile_SSMT2 (S)
change_type (F) 
	change_type_zero_nan(F)



Procedure: Run FCDR production 

To run the FCDR processing without any changes to version 4.1, please proceed to section B. Section A explains how to perform specific changes (e.g. application of harmonised parameters) before re-running the FCDR production.

Section A
1.	What do you want to change?
a.	Harmonised parameters
If you received new values for the harmonisation parameters “nonlinearity”, “cold target correction dT_c”, “warm target correction dT_w” or “polarisation correction alpha”, open the script apply_harmonised_parameters.
i.	Set the respective indicators to zero or one, depending on whether you want to use updated values or not.
ii.	Set the variables to the new updated values. 
ch3_a_1, u_nonlincoeff, ch3_dTw, u_dTw, ch3_dTc, u_ch3_dTc, ch3_alpha, u_ch3_alpha.
If you also received new values for other channels, you need to adapt the script slightly and add variables for the respective further channels. Make sure that these variables are then incorporated to any arrays that combine the channels.
Save the script apply_harmonised_parameters.m.
iii.	Open the setup_XXX-scripts. For MHS, you need to uncomment the very last line where the script apply_harmonised_parameters will be called. For AMSUB or SSMT2, you have to add this line to the setup-script. Save the setup-scripts.

b.	Antenna pattern correction/ thresholds/ …
If you want to change any coefficient that is stored in the coeffs_...mat-files, open the set_coeffs.m script. Apply the changes you want to make. Then run the set_coeffs.m script to create new coeffs_...mat files. WATCH OUT: you overwrite the old files! 
Once the new files are created, the code will use your updated values.
c.	Any part of the code
If you want to change any part of the code, save the changes. Be careful not to delete variables/ rename them without making sure that they are correctly transferred to following scripts/ functions.
2.	Adapting the writing-path for new-files
Very important: Any time you want to change the FCDR processing and you want to produce new FCDR files, you have to change the filename/ storage path in order to keep clean versions of the FCDR. If you change the format, i.e. the writer-scripts, then change the fv-number in the filename. If you change the code/ harmonisation parameters, increase the v-number and keep track of your FCDR versions and used parameters.
3.	Now you are ready to call the FCDR_generator, choosing a specific satellite, sensor, year and month. Note that the FCDR_generator only processes whole months (because of the Equator-to-Equator arrangement). If you want to process more than one month, maybe even a mission, go to section B and use the run_batch_mission.m script.

Section B
To run a mission, you have to perform the following steps:
1.	Start MATLAB and go into the FCDR_processing folder. Open the run_batch_mission.m script in the editor and choose the satellite, instrument and start and endyear of the mission (set the respective variables), and choose the months (e.g.1 to 12) that shall be processed.
You can also specify which nodes you want to EXclude, i.e. which ones you will not use for your jobs. It is recommended to exclude a few nodes, such that other people in the group still have capacities available.
For example:
ctc[139]
This option in the sbatch command in the run_batch_mission.m script excludes node 139, i.e. nodes 132-138 will be used.

Once you have prepared the run_batch_mission script, you can send the jobs to the queue (next step).

2.	Open a terminal and change directory to the FCDR_processing-folder and start matlab.

:/scratch/uni/u237/users/ihans/codes/fiduceo/FCDR_processing$ matlab -nojvm -nodisplay –nosplash

Now, run the script to send the jobs to the queue:

run_batch_mission

Do this for every mission/ part of a mission that you want to process. This is all.

Now, the jobs are running and the output NetCDF files will be stored as specified in the write_easyFCDR_orbitfile_XXX-scripts. The batch-jobs will create themselves two files: 1. An error file .err that stores all error messages in case the code crashes. 2. An outputfile  .out printing the display outputs during the processing. These two files will help to track down issues in case of failures.

Processing the whole missions of the eleven humidity sounders using the described procedure can be completed over a week-end. Depending on the chosen number of nodes, it may be quicker or slower. 
Appendix

MATLAB startup file
My start up file, located in ihans/matlab  looks like this

function startup

run( '/scratch/uni/u237/users/ihans/atmlab/atmlab/atmlab_init' );
[SUCCESS,MESSAGE,MESSAGEID] = mkdir('/dev/shm/u237015');
atmlab('WORK_AREA', '/dev/shm/u237015');
atmlab('DEBUG',0); %%files are not deleted from folder after execution. You have to do it yourself!!! 

atmlab('ARTS_PATH','/scratch/uni/u237/users/ihans/arts/build/src/arts');
atmlab('ARTS_INCLUDES','/scratch/uni/u237/users/ihans/arts/controlfiles/general');
atmlab('ARTS_XMLDATA_PATH','/scratch/uni/u237/users/ihans/arts-xml-data');
atmlab('ATMLAB_PATH','/scratch/uni/u237/users/ihans/atmlab/atmlab');
atmlab('SITE','hamburg');

I have to rerun the startup explicitly, if I change something in atmlab, and I want the changes to become active in a running matlab-session (if you start matlab, the startup is run automatically).



